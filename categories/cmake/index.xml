<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cmake on A Crazy Cat</title><link>https://www.offf.xyz/categories/cmake/</link><description>Recent content in cmake on A Crazy Cat</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 06 Jun 2019 23:37:21 +0800</lastBuildDate><atom:link href="https://www.offf.xyz/categories/cmake/index.xml" rel="self" type="application/rss+xml"/><item><title>cmake 简介</title><link>https://www.offf.xyz/cmake-01/</link><pubDate>Thu, 06 Jun 2019 23:37:21 +0800</pubDate><guid>https://www.offf.xyz/cmake-01/</guid><description>一、为什么要使用 cmake cmake 可以实现 c/c++ 跨平台代码的编译 二、cmake 简单使用 # the minimum version cmake_minimum_required(VERSION 3.10) # set the project name project(Tutorial VERSION 1.0) # set verbose set(CMAKE_VERBOSE_MAKEFILE on) # add the executable add_executable(Tutorial tutorial.cxx) configure_file(TutorialConfig.h.in TutorialConfig.h) target_include_directories(Tutorial PUBLIC &amp;#34;${PROJECT_BINARY_DIR}&amp;#34; ) # specify the C++ standard set(CMAKE_CXX_STANDARD 11) set(CMAKE_CXX_STANDARD_REQUIRED True) //TutorialConfig.h.in // the configured options and settings for Tutorial #define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@ #define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@ // tutorial.cxx #include &amp;lt;iostream&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;#34;TutorialConfig.</description></item></channel></rss>