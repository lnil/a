<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on A Crazy Cat</title><link>https://www.offf.xyz/tags/golang/</link><description>Recent content in golang on A Crazy Cat</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 16 Mar 2019 23:55:21 +0800</lastBuildDate><atom:link href="https://www.offf.xyz/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang方法</title><link>https://www.offf.xyz/gopl-ch06/</link><pubDate>Sat, 16 Mar 2019 23:55:21 +0800</pubDate><guid>https://www.offf.xyz/gopl-ch06/</guid><description>Go语言借助方法来实现OOP
Go语言OOP的两个关键是封装和组合
一、方法 方法是属于某种类型的，方法可以被声明到任意类型，只要不是一个指针或者一个interface。 值类型和引用类型：
（1）值类型包括：基本数据类型int系列、float系列、bool、string、数组和结构体；
（2）引用类型：指针、slice切片、map、管道channel、interface等；
值类型和引用类型的区别： （1）值类型，变量直接存储，内存通常在栈中分配；
（2）引用类型：变量存储的是一个地址，这个地址对应的空间才是真正存储的数据值，内存通常在堆上分配，当没有任何变量引用这个地址时，此地址对应的数据空间就是一个垃圾，由GC来回收；
type Point struct {
x, y float64
}
//function func Distance(p, q Point) float64 {
return math.Hypot(q.x-p.x, q.x-p.x)
}
//method
//p为方法的接收器(receiver)，接收器的名字建议用类型的第一个字母或第2个word的第一个字母
func (p Point) Distance(q Point) float64 {
return math.Hypot(q.x-p.x, q.y-p.y)
}
p := Point{1, 2}
q := Point{4, 6}
fmt.Println(Distance(p, q)) // &amp;#34;5&amp;#34;, function call
fmt.Println(p.Distance(q)) // &amp;#34;5&amp;#34;, method call
//p.Distance被称为选择器
//计算线段的长度
// A Path is a journey connecting the points with straight lines.</description></item><item><title>Golang函数</title><link>https://www.offf.xyz/gopl-ch05/</link><pubDate>Sat, 16 Mar 2019 23:37:21 +0800</pubDate><guid>https://www.offf.xyz/gopl-ch05/</guid><description>一、函数定义 函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。
func name(parameter-list) (result-list) {
body
}
func add(x int, y int) int {return x + y}
func sub(x, y int) (z int) { z = x - y; return}
func first(x int, _ int) int { return x }
func zero(int, int) int { return 0 }
fmt.Printf(&amp;#34;%T\n&amp;#34;, add) // &amp;#34;func(int, int) int&amp;#34;
fmt.Printf(&amp;#34;%T\n&amp;#34;, sub) // &amp;#34;func(int, int) int&amp;#34;
fmt.Printf(&amp;#34;%T\n&amp;#34;, first) // &amp;#34;func(int, int) int&amp;#34;
fmt.Printf(&amp;#34;%T\n&amp;#34;, zero) // &amp;#34;func(int, int) int&amp;#34;
二、递归 函数可以调用函数自身。
func f(n int) int {
if n == 1 || n == 2 {
return 1
}
return f(n-1) + f(n-2)
}
三、多返回值函数 Go可以返回多个值给调用者</description></item><item><title>Golang复合类型</title><link>https://www.offf.xyz/gopl-ch04/</link><pubDate>Wed, 13 Mar 2019 13:37:21 +0800</pubDate><guid>https://www.offf.xyz/gopl-ch04/</guid><description>简述 基本类型是Go语言世界的原子，复合类型则是分子。
数组 数组是固定长度的序列。因此，其很少直接使用。 与C语言数组特性类似。
var a [3]int //其中[3]int为数组类型
fmt.Println(a[0])
fmt.Println(a[len(a) - 1])
var b [3]int = [3]int{1, 2, 3}
var c [3]int = [3]int{1, 2}
var d = [...]int{1, 2, 3, 4} // len = 4
q := [...]int{1, 2}
//指定一个索引和对应值列表的方式初始化
type Currency int
const (
USD Currency = iota // 美元
EUR // 欧元
GBP // 英镑
RMB // 人民币
)
symbol := [...]string{USD: &amp;#34;$&amp;#34;, EUR: &amp;#34;€&amp;#34;, GBP: &amp;#34;￡&amp;#34;, RMB: &amp;#34;￥&amp;#34;}
fmt.</description></item><item><title>Golang基础数据类型</title><link>https://www.offf.xyz/gopl-ch03/</link><pubDate>Tue, 12 Mar 2019 23:37:21 +0800</pubDate><guid>https://www.offf.xyz/gopl-ch03/</guid><description>整型 一般整型
int8 int16 int32 int64
uint8 uint16 uint32 uint64
分别对应8、16、32、64bit的数 特别的整型 Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。因此rune和int32可以互换使用。
byte类型等价于uint8类型，byte用于强调数据的原始性。
uintptr用来存放指针，多用于底层编程。
int和int32大小相同，但是，是两个不同的类型。
取模的结果总是与被取模数的符号相同
fmt.Println(5%3) //2
fmt.Println(5%-3) //2
fmt.Println(-5%3) //-2
fmt.Println(-5%-3) //-2
符点数 float32、float64
通常应该优先使用float64类型，因为float32类型的累计计算误差很容易扩散。
复数 complex64、complex128
var x complex128 = complex(1, 2) // 1+2i
var y complex128 = complex(3, 4) // 3+4i
fmt.Println(x*y) // &amp;#34;(-5+10i)&amp;#34;
fmt.Println(real(x*y)) // &amp;#34;-5&amp;#34; //取实部
fmt.Println(imag(x*y)) // &amp;#34;10&amp;#34; //取虚部
布尔型 true/false
// btoi returns 1 if b is true and 0 if false.</description></item><item><title>Golang 程序结构</title><link>https://www.offf.xyz/gopl-ch02/</link><pubDate>Sat, 09 Mar 2019 23:37:21 +0800</pubDate><guid>https://www.offf.xyz/gopl-ch02/</guid><description>关键字 go中含有25个关键字
break default func interface select
case defer go map struct
chan else goto package switch
const fallthrough if range type
continue for import return var
此外，还有大约30多个预定义的名字 内建常量: true false iota nil
内建类型: int int8 int16 int32 int64
uint uint8 uint16 uint32 uint64 uintptr
float32 float64 complex128 complex64
bool byte rune string error
内建函数: make len cap new append copy close delete
complex real imag
panic recover
名字大小写 大写的名字表明是可导出的，即可被其它包访问，如fmt包中的Println 小写的名字只能在包内使用
名字长度 一般名字的长度是没有限制的。 Go提倡短小的名称，如表示索引，定义为i,而不是index等 当作用域范围较大或生命周期较长的变量，采用较长的名字可能会更好。
声明 主要有4种类型的声明语句：
var(变量)
var 变量名字 类型 = 表达式</description></item><item><title>Goroutines和Channels</title><link>https://www.offf.xyz/gopl-ch08/</link><pubDate>Fri, 08 Mar 2019 23:37:21 +0800</pubDate><guid>https://www.offf.xyz/gopl-ch08/</guid><description>CSP: “顺序通信进程”(communicating sequential processes)或被简称为CSP。 CSP是一种现代的并发编程模型，在这种编程模型中值会在不同的运行实例(goroutine)中传递。
一、Goroutines 定义：在GO中，每个并发的执行单元被称为一个goroutine go语句： 在函数或方法前加上关键字go，就形成了go语句。go语句使函数或方法在新建的goroutine中执行。 程序启动时，主函数（main函数）会在main goroutine中执行。当main goroutine退出时，所有其它goroutine都会退出。 f() // call f(); wait for it to return
go f() // create a new goroutine that calls f(); don&amp;#39;t wait
func main() {
l, err := net.Listen(&amp;#34;tcp&amp;#34;, &amp;#34;192.168.0.1:8000&amp;#34;)
if err != nil {
log.Fatal(err)
}
for {
conn, err := l.Accept()
if err != nil {
log.Print(err)
continue
}
go handleConn(conn)
}
}
二、Channels channel 是 goroutines之间通信的机制 通过make来创建一个channel 与map类似，channel也是能底层数据结构的引用，作为函数参数传递时，是传递的引用。 channel的零值为nil。 channel之间可以用 == 进行比较。 一个channel有发送和接收两个操作，都是通信行为。 发送将一个值从一个goroutine发送到另一个接收该值的goroutine。 发送和接收都使用 &amp;lt;- 运算符号，发送时，&amp;lt;-分割channel和要发送的值。接收时，&amp;lt;-放在channel之前。 在关闭的channel上发送数据会引起panic, 但可以接收数据，如果被关闭的channel中没有数据，则得到零值。 ch &amp;lt;- x // a send statement
y := &amp;lt;-ch // a receive expression in an assignment statement
&amp;lt;-ch // a receive statement; result is discarded
close(ch) // close channel
三、不带缓冲的channel ch = make(chan int) // unbuffered channel
ch = make(chan int, 0) // unbuffered channel
ch = make(chan int, 3) // buffered channel with capacity 3
在无缓存的channel上进行收发操作，将会导致此goroutine阻塞，直到有另一个goroutine对该通道进行发收操作。 无缓存的channel上的收发，导致两个goroutine进行一次同步操作。所以，无缓存channel也叫同步channel。 当我们说x事件既不是在y事件之前发生也不是在y事件之后发生，我们就说x事件和y事件是并发的。 func main() {
conn, err := net.</description></item><item><title>Golang 入门</title><link>https://www.offf.xyz/gopl-ch01/</link><pubDate>Fri, 08 Mar 2019 13:37:21 +0800</pubDate><guid>https://www.offf.xyz/gopl-ch01/</guid><description>语言支持 Go语言原生支持Unicode，它可以处理全世界任何语言的文本。
语言组织 Go语言代码由包组织而成 一个目录定义一个包，目录中存放N个.go源码包 包通过import关键字导入到其它的包中使用 Go采用静态编译，将所有第三方依赖打包编译为一个光秃秃的可执行文件 Go语言只有一种循环语言，就是for语句 printf常用转换字符 %d 十进制整数
%x, %o, %b 十六进制，八进制，二进制整数。
%f, %g, %e 浮点数： 3.141593 3.141592653589793 3.141593e+00
%t 布尔：true或false
%c 字符（rune） (Unicode码点)
%s 字符串
%q 带双引号的字符串&amp;quot;abc&amp;quot;或带单引号的字符'c'
%v 变量的自然形式（natural format）
%T 变量的类型
%% 字面上的百分号标志（无操作数）</description></item><item><title>Golang接口</title><link>https://www.offf.xyz/gopl-ch07/</link><pubDate>Wed, 06 Mar 2019 13:37:21 +0800</pubDate><guid>https://www.offf.xyz/gopl-ch07/</guid><description>一、概念 接口类型是一种抽象的类型。它只展示出类型的方法，不做具体的实现。
//
package fmt
func Fprintf(w io.Writer, format string, args ...interface{}) (int, error)
func Printf(format string, args ...interface{}) (int, error) {
return Fprintf(os.Stdout, format, args...)
}
func Sprintf(format string, args ...interface{}) string {
var buf bytes.Buffer
Fprintf(&amp;amp;buf, format, args...)
return buf.String()
}
//io.Writer为接口类型
package io
// Writer is the interface that wraps the basic Write method.
type Writer interface {
Write(p []byte) (n int, err error)
}
//io.Writer实现示例
type ByteCounter int
func (c *ByteCounter) Write(p []byte) (int, error) {
*c += ByteCounter(len(p)) // convert int to ByteCounter
return len(p), nil
}
var c ByteCounter
c.</description></item><item><title>Golang简介整理</title><link>https://www.offf.xyz/gopl-ch00/</link><pubDate>Wed, 06 Mar 2019 13:37:21 +0800</pubDate><guid>https://www.offf.xyz/gopl-ch00/</guid><description> B语言 -&amp;gt; C语言 -&amp;gt; Go语言，Go语言被称为21世纪的C语言。 没有隐式的数值转换 没有构造函数和析构函数 没有运算符重载 没有默认参数 没有继承 没有泛型 没有异常 没有宏 没有函数修饰 更没有线程局部存储。</description></item><item><title>The Go Programming Language</title><link>https://www.offf.xyz/the-go-programming-language/</link><pubDate>Tue, 05 Mar 2019 13:37:21 +0800</pubDate><guid>https://www.offf.xyz/the-go-programming-language/</guid><description>1-5: 基础部分 6: 方法 7: 接口 8: CSP概念的并发编程 9: 共享变量的并发编程 10: 包的机制和结构 11: 单元测试 12: 反射 13: 底层编程</description></item></channel></rss>